{"version":3,"sources":["utils/LocalStorage.ts","atom/Board.ts","components/Card/index.tsx","components/common/Button.tsx","components/Board/styles.ts","styles/colors.ts","components/Board/index.tsx","components/Trash/index.tsx","components/List/styles.ts","components/List/index.tsx","styles/GlobalStyle.tsx","components/AddBoard/styles.ts","components/AddBoard/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalStorage","key","localStorage","getItem","value","setItem","removeItem","clear","boardState","atom","default","prev","getValue","JSON","parse","init","Card","index","card","setBoard","useSetRecoilState","onClickHandler","useCallback","id","prevBoard","tempBoard","Object","keys","forEach","filter","prevCard","draggableId","p","Wrapper","ref","innerRef","dragHandleProps","draggableProps","Content","text","Button","onClick","memo","buttonStyles","BasicButton","isDragging","css","Title","Form","ButtonWap","TextArea","CancleButton","Board","title","useRecoilState","board","useState","isOpen","setIsOpen","useForm","register","handleSubmit","setValue","onClickOpen","onSubmit","data","content","length","contentArr","Date","now","push","b","direction","droppableId","type","provider","snapshot","droppableProps","isDraggingOver","map","item","i","placeholder","Trash","TrashSection","icon","faTrashAlt","size","BoardWrapper","TrelloList","useEffect","stringify","addBoard","onDragEnd","result","source","destination","newBoard","splice","temp","start","end","entries","reduce","acc","a11y","ResetStyles","GlobalStyles","styles","Label","Input","AddBoard","htmlFor","includes","App","GlobalStyle","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b80f271.chunk.js","sourcesContent":["export class LocalStorage {\n  static getValue(key: string) {\n    return localStorage.getItem(key);\n  }\n\n  static setValue(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n\n  static remove(key: string) {\n    localStorage.removeItem(key);\n  }\n\n  static clear() {\n    localStorage.clear();\n  }\n}\n","import { atom } from 'recoil';\nimport { LocalStorage } from '../utils/LocalStorage';\n\nexport interface BoardAtom {\n  id: number;\n  text: string;\n}\n\ninterface BoardAtomItem {\n  [key: string]: BoardAtom[];\n}\n\nexport const addBoard = (board: BoardAtomItem) => {\n  LocalStorage.setValue('board', JSON.stringify(board));\n};\n\nexport const init = () => {\n  const prev = LocalStorage.getValue('board');\n\n  if (prev) {\n    return JSON.parse(prev);\n  }\n\n  return null;\n};\n\nexport const boardState = atom<BoardAtomItem>({\n  key: 'board',\n  default: init() ?? ({} as BoardAtomItem),\n});\n","import styled from '@emotion/styled';\nimport { memo, useCallback } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { useSetRecoilState } from 'recoil';\nimport { BoardAtom, boardState } from '../../atom/Board';\n\ninterface CardProps {\n  index: number;\n  card: BoardAtom;\n}\n\nconst Card = ({ index, card }: CardProps) => {\n  const setBoard = useSetRecoilState(boardState);\n\n  const onClickHandler = useCallback(\n    (id: number) => {\n      setBoard((prevBoard) => {\n        const tempBoard = { ...prevBoard };\n        const keyArr = Object.keys(tempBoard);\n\n        keyArr.forEach((key) => {\n          tempBoard[key] = prevBoard[key].filter((prevCard) => prevCard.id !== id);\n        });\n\n        return tempBoard;\n      });\n    },\n    [setBoard],\n  );\n\n  return (\n    <li>\n      <Draggable draggableId={`${card.id}`} index={index} key={card.id}>\n        {(p) => (\n          <Wrapper ref={p.innerRef} {...p.dragHandleProps} {...p.draggableProps}>\n            <Content>{card.text}</Content>\n            <Button onClick={() => onClickHandler(card.id)}>x</Button>\n          </Wrapper>\n        )}\n      </Draggable>\n    </li>\n  );\n};\n\nexport default memo(Card);\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  justify-content: space-between;\n  background-color: gray;\n  margin-bottom: 1rem;\n  padding: 10px;\n  border-radius: 4px;\n  font-size: 14px;\n`;\n\nconst Content = styled.div`\n  flex: 1;\n`;\n\nconst Button = styled.button`\n  width: 30px;\n  height: 100%;\n  background-color: gray;\n  border: none;\n`;\n","import styled from '@emotion/styled';\nimport { css } from '@emotion/react';\n\nconst buttonStyles = css`\n  border-radius: 4px;\n  width: max-content;\n  border: none;\n  background-color: #5a93be;\n  padding: 6px 12px;\n  color: white;\n  &:hover {\n    cursor: pointer;\n  }\n`;\n\nexport const BasicButton = styled.button`\n  ${buttonStyles};\n`;\n","import { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { boardColor } from '../../styles/colors';\nimport { BasicButton } from '../common/Button';\n\nexport const Wrapper = styled.div(\n  ({ isDragging }: { isDragging: boolean }) => css`\n    width: 300px;\n    height: min-content;\n    background-color: ${isDragging ? '#E41566' : boardColor};\n    border-radius: 5px;\n    margin: 0 20px 40px 0;\n  `,\n);\n\nexport const Title = styled.h2`\n  padding: 5px;\n  margin-bottom: 5px;\n  font-weight: bold;\n`;\n\nexport const Content = styled.ul(\n  ({ isDragging }: { isDragging: boolean }) => css`\n    min-height: 5px;\n    li {\n      background-color: ${isDragging ? '#E41566' : '#636e72'};\n      border-radius: 5px;\n      list-style: none;\n    }\n  `,\n);\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const ButtonWap = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  padding: 10px;\n`;\n\nexport const TextArea = styled.textarea`\n  width: 100%;\n  border-radius: 5px;\n  border: none;\n  padding: 8px;\n`;\n\nexport const Button = styled(BasicButton)`\n  &:hover {\n    background: rgba(92, 93, 94, 0.1);\n    cursor: pointer;\n  }\n`;\n\nexport const CancleButton = styled(BasicButton)`\n  background-color: #e41566;\n  color: white;\n  margin-left: 10px;\n`;\n","export const mainBg = '#3f8cf2';\n\nexport const boardColor = '#dadfe9';\n","import { memo, useCallback, useState } from 'react';\nimport { Draggable, Droppable } from 'react-beautiful-dnd';\nimport { useRecoilState } from 'recoil';\nimport { useForm } from 'react-hook-form';\nimport { boardState } from '../../atom/Board';\nimport Card from '../Card';\nimport * as Styles from './styles';\n\ninterface BoardProps {\n  title: string;\n  index: number;\n  isDragging: boolean;\n}\n\ninterface FormData {\n  content: string;\n}\n\nconst Board = ({ title, index, isDragging }: BoardProps) => {\n  const [board, setBoard] = useRecoilState(boardState);\n  const [isOpen, setIsOpen] = useState(false);\n  const { register, handleSubmit, setValue } = useForm<FormData>();\n\n  const onClickOpen = useCallback(() => {\n    setIsOpen((prev) => !prev);\n  }, []);\n\n  const onSubmit = useCallback(\n    (data: FormData) => {\n      const { content } = data;\n\n      if (content.length === 0) {\n        return;\n      }\n\n      const contentArr = [...board[title]];\n      const id = Date.now();\n\n      contentArr.push({ id, text: content });\n\n      setBoard((prev) => ({ ...prev, [title]: contentArr }));\n      setValue('content', '');\n    },\n    [board, setBoard, setValue, title],\n  );\n  return (\n    <Draggable key={title} draggableId={title} index={index}>\n      {(b) => (\n        <Styles.Wrapper ref={b.innerRef} {...b.dragHandleProps} {...b.draggableProps} isDragging={isDragging}>\n          <Styles.Title>{title}</Styles.Title>\n          <Droppable direction=\"vertical\" droppableId={title} type=\"card\">\n            {(provider, snapshot) => (\n              <Styles.Content ref={provider.innerRef} {...provider.droppableProps} isDragging={snapshot.isDraggingOver}>\n                {board[title].map((item, i) => {\n                  return <Card key={i} card={item} index={i} />;\n                })}\n                <li>{provider.placeholder}</li>\n              </Styles.Content>\n            )}\n          </Droppable>\n          {isOpen ? (\n            <Styles.Form onSubmit={handleSubmit(onSubmit)}>\n              <Styles.TextArea placeholder=\"입력\" {...register('content')} />\n              <Styles.ButtonWap>\n                <Styles.Button>추가</Styles.Button>\n                <Styles.CancleButton onClick={onClickOpen}>취소</Styles.CancleButton>\n              </Styles.ButtonWap>\n            </Styles.Form>\n          ) : (\n            <Styles.ButtonWap>\n              <Styles.Button onClick={onClickOpen}>글쓰기</Styles.Button>\n            </Styles.ButtonWap>\n          )}\n        </Styles.Wrapper>\n      )}\n    </Draggable>\n  );\n};\n\nexport default memo(Board);\n","import styled from '@emotion/styled';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst Trash = () => {\n  return (\n    <Wrapper>\n      <Droppable droppableId=\"trash\" type=\"board\">\n        {(p) => (\n          <TrashSection ref={p.innerRef} {...p.droppableProps}>\n            <FontAwesomeIcon icon={faTrashAlt} size={'2x'} />\n          </TrashSection>\n        )}\n      </Droppable>\n    </Wrapper>\n  );\n};\n\nexport default Trash;\n\nconst Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100px;\n  height: 100px;\n`;\n\nconst TrashSection = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import styled from '@emotion/styled';\n\nexport const BoardWrapper = styled.div`\n  width: min-content;\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n  justify-content: flex-start;\n  margin-top: 100px;\n`;\n","import { useEffect } from 'react';\nimport { DragDropContext, Droppable, DropResult } from 'react-beautiful-dnd';\nimport { useRecoilState } from 'recoil';\nimport { addBoard, boardState } from '../../atom/Board';\nimport Board from '../Board';\nimport Trash from '../Trash';\nimport * as Styles from './styles';\n\nexport const TrelloList = () => {\n  const [board, setBoard] = useRecoilState(boardState);\n\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination, type, draggableId } = result;\n\n    if (!destination || !source) {\n      return;\n    }\n\n    if (destination.droppableId === 'trash') {\n      setBoard((prev) => {\n        const newBoard = { ...prev };\n        delete newBoard[draggableId];\n\n        return newBoard;\n      });\n      return;\n    }\n    if (type === 'board') {\n      setBoard((prev) => {\n        const newBoard = Object.entries(prev);\n\n        const [temp] = newBoard.splice(source.index, 1);\n        newBoard.splice(destination.index, 0, temp);\n\n        return newBoard.reduce(\n          (acc, [key, value]) => ({\n            ...acc,\n            [key]: value,\n          }),\n          {},\n        );\n      });\n      return;\n    }\n    if (type === 'card') {\n      if (source.droppableId === destination.droppableId) {\n        const newBoard = [...board[source.droppableId]];\n        const [temp] = newBoard.splice(source.index, 1);\n        newBoard.splice(destination.index, 0, temp);\n\n        setBoard((prev) => ({ ...prev, [source.droppableId]: newBoard }));\n\n        return;\n      }\n      const start = [...board[source.droppableId]];\n      const end = [...board[destination.droppableId]];\n      const [temp] = start.splice(source.index, 1);\n      end.splice(destination.index, 0, temp);\n\n      setBoard((prev) => ({\n        ...prev,\n        [source.droppableId]: start,\n        [destination.droppableId]: end,\n      }));\n    }\n  };\n\n  useEffect(() => {\n    addBoard(board);\n  }, [board]);\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable droppableId=\"board\" direction=\"horizontal\" type=\"board\">\n        {(b, snapshot) => (\n          <Styles.BoardWrapper ref={b.innerRef} {...b.droppableProps}>\n            {Object.keys(board).map((item, index) => {\n              return <Board title={item} index={index} key={index} isDragging={snapshot.isDraggingOver} />;\n            })}\n            {b.placeholder}\n          </Styles.BoardWrapper>\n        )}\n      </Droppable>\n      <Trash />\n    </DragDropContext>\n  );\n};\n","import { css, Global } from '@emotion/react';\n\nexport const a11y = css`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  border: 0;\n  border-radius: 0;\n  clip: rect(0, 0, 0, 0);\n`;\n\nexport const ResetStyles = css`\n  * {\n    .a11y {\n      ${css([a11y])};\n    }\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    -ms-overflow-style: none;\n    font-size: inherit;\n  }\n\n  #root {\n    height: 100vh;\n  }\n`;\n\nconst GlobalStyles = () => (\n  <>\n    <Global styles={ResetStyles} />\n  </>\n);\n\nexport default GlobalStyles;\n","import styled from '@emotion/styled';\n\nexport const Wrapper = styled.header`\n  width: 270px;\n  margin: 0 auto;\n  padding: 10px;\n  background-color: white;\n  border-radius: 4px;\n  margin-bottom: 2rem;\n`;\n\nexport const Label = styled.label`\n  font-size: 18px;\n  font-weight: bold;\n`;\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  margin: 10px 0px;\n  border: none;\n  padding: 8px 10px;\n  font-size: 16px;\n  &:focus {\n    outline: none;\n  }\n  &::placeholder {\n    font-size: 14px;\n  }\n`;\n","import { useForm } from 'react-hook-form';\nimport { useRecoilState } from 'recoil';\nimport { boardState } from '../../atom/Board';\nimport { BasicButton } from '../common/Button';\nimport * as Styles from './styles';\n\ninterface FormMoel {\n  title: string;\n}\n\nconst AddBoard = () => {\n  const [board, setBoard] = useRecoilState(boardState);\n  const { register, handleSubmit, setValue } = useForm<FormMoel>();\n  const onSubmit = (data: FormMoel) => {\n    const { title } = data;\n    if (!title) {\n      return;\n    }\n\n    if (Object.keys(board).includes(title)) {\n      return;\n    }\n\n    setBoard((prev) => ({ ...prev, [title]: [] }));\n    setValue('title', '');\n  };\n\n  return (\n    <Styles.Wrapper>\n      <Styles.Label htmlFor=\"head\">칸반보드 추가</Styles.Label>\n      <Styles.Form onSubmit={handleSubmit(onSubmit)}>\n        <Styles.Input id=\"title\" type=\"text\" placeholder=\"보드의 이름을 써주세요\" {...register('title')} />\n        <BasicButton type=\"submit\">추가</BasicButton>\n      </Styles.Form>\n    </Styles.Wrapper>\n  );\n};\n\nexport default AddBoard;\n","import { RecoilRoot } from 'recoil';\nimport styled from '@emotion/styled';\nimport { TrelloList } from './components/List';\nimport GlobalStyles from './styles/GlobalStyle';\nimport { mainBg } from './styles/colors';\nimport AddBoard from './components/AddBoard';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <GlobalStyles />\n      <Wrapper>\n        <AddBoard />\n        <TrelloList />\n      </Wrapper>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: ${mainBg};\n  padding: 20px;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}